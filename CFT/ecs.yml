AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
Description: ""
Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !GetAtt ElasticLoadBalancingV2TargetGroup.TargetGroupName
      CapacityProviders:
        - "FARGATE"
        - "FARGATE_SPOT"

  ECSService:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: !GetAtt ElasticLoadBalancingV2LoadBalancer.LoadBalancerName
      Cluster: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}"
      LoadBalancers:
        - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
          ContainerName: !GetAtt ElasticLoadBalancingV2LoadBalancer.LoadBalancerName
          ContainerPort: 8080
      DesiredCount: 1
      PlatformVersion: "LATEST"
      TaskDefinition: !Ref ECSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - "sg-9ab909d5"
          Subnets:
            - "subnet-90de5ef7"
            - "subnet-a04212ea"
      HealthCheckGracePeriodSeconds: 300
      SchedulingStrategy: "REPLICA"
      DeploymentController:
        Type: "ECS"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}:1"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/ecs/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Name: !GetAtt ElasticLoadBalancingV2LoadBalancer.LoadBalancerName
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: "tcp"
      Family: !GetAtt ElasticLoadBalancingV2LoadBalancer.LoadBalancerName
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "1024"
      Memory: "3072"

  ElasticLoadBalancingV2LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !GetAtt ElasticLoadBalancingV2TargetGroup.TargetGroupName
      Scheme: "internet-facing"
      Type: "application"
      Subnets:
        - "subnet-90de5ef7"
        - "subnet-a04212ea"
      SecurityGroups:
        - "sg-9ab909d5"
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        - Key: "access_logs.s3.enabled"
          Value: "false"
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "routing.http2.enabled"
          Value: "true"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        - Key: "routing.http.xff_client_port.enabled"
          Value: "false"
        - Key: "routing.http.preserve_host_header.enabled"
          Value: "false"
        - Key: "routing.http.xff_header_processing.mode"
          Value: "append"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "true"
        - Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"
        - Key: "waf.fail_open.enabled"
          Value: "false"
        - Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
          Value: "false"

  ElasticLoadBalancingV2Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 8080
      Protocol: "HTTP"
      DefaultActions:
        - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
          Type: "forward"

  ElasticLoadBalancingV2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 8080
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: "vpc-1174a96b"
      Name: "nodejs-app"
      HealthCheckEnabled: true
      TargetGroupAttributes:
        - Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
          Value: "1"
        - Key: "stickiness.enabled"
          Value: "false"
        - Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
          Value: "off"
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
          Value: "1"
        - Key: "stickiness.app_cookie.cookie_name"
          Value: ""
        - Key: "stickiness.type"
          Value: "lb_cookie"
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "stickiness.app_cookie.duration_seconds"
          Value: "86400"
        - Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
          Value: "off"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "use_load_balancer_configuration"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"
      Targets:
        - Id: "172.31.3.136"
          Port: 8080
          AvailabilityZone: !Sub "${AWS::Region}a"

  # ECRRepository:
  #   Type: "AWS::ECR::Repository"
  #   Properties:
  #     RepositoryName: !Ref ECSCluster
  #     LifecyclePolicy:
  #       RegistryId: !Ref AWS::AccountId
